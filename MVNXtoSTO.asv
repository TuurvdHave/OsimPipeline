function MVNXtoSTO(params,input_file,subjectnaam,mainpath)
%% MVNXtoSTO (covert .mvnx file from Xsens to .sto format for OpenSense processing)
% Syntax: MVNXtoSTO(params,input_file,subject,mainpath)
%
% Inputs:
%   params - a JSON file containing parameters for IK setup
%   input_file - the name of the MVNX file to convert
%   subject - the name of the subject to process
%   mainpath - the path to the main directory containing all files
%
% Outputs:
%   None
%
% Example usage: MVNXtoSTO('params.json', 'motioncapture.mvnx', 'subject1', '/path/to/files')

% Add required directories to the MATLAB path
addpath(genpath(fullfile(cd,'GenericSetup')))
addpath(genpath(fullfile(cd,'SubFunctions')))

% Load the parameters file (in JSON format)
disp('Loading params file')
fid = fopen(params); 
raw = fread(fid,inf); 
str = char(raw'); 
fclose(fid); 
data = jsondecode(str);
disp('Loaded parameters')
disp(data);

% Set up paths for input and output files
main_path       = mainpath; 
OpenSim_path    = data.osim_path; 
Generic_files   = [mainpath,'\GenericSetup'];
Subject         = char(subjectnaam); 
path_input      = fullfile(main_path,Subject); 
path_output     = fullfile(main_path,Subject,'Opensim'); 


%% Part 1 - wrinting the files to .mat

disp("--- PART 1: WRITING MAT FILES ---")
    % Loading the mvnx files
    [tree] = load_mvnx(fullfile(path_input, input_file));
    % Store some info on the subject
    rawData.suitLabel = tree.subject.label;
    rawData.framerate = tree.subject.frameRate;
    rawData.segmentcount = tree.subject.segmentCount;
    rawData.originalFilename = tree.subject.originalFilename;

    % define the sensor locations
    for i=1:numel(tree.subject.segments.segment(i).label)
        sensorLocation{1,i} = tree.subject.segments.segment(i).label;
    end

    % define the segmentNames
    for i=1:numel(tree.subject.segments.segment)
        segmentNames{1,i} = tree.subject.segments.segment(i).label;
    end

    % define the jointNames
    for i=1:numel(tree.subject.joints.joint)
        jointNames{1,i} = tree.subject.joints.joint(i).label;
    end


    % seperating the identity, t-pose and n-pose orientation and position data
    % identity
    rawData.staticData.identity.orientation = tree.subject.frames.frame(1).orientation;
    rawData.staticData.identity.position = tree.subject.frames.frame(1).position;
    % t-pose
    rawData.staticData.tpose.orientation = tree.subject.frames.frame(2).orientation;
    rawData.staticData.tpose.position = tree.subject.frames.frame(2).position;
    % t-pose-isb
    rawData.staticData.tpose_isb.orientation = tree.subject.frames.frame(3).orientation;
    rawData.staticData.tpose_isb.position = tree.subject.frames.frame(3).position;

    tree.subject.frames.frame(1:3) = [];

    % restructuring the segment data
    for i = 1:numel(tree.subject.frames.frame)
        for sn = 1:numel(segmentNames)
            s2=sn * 3;
            s1=(sn * 3)-2;
            rawData.segments.(segmentNames{sn}).segmentPosition(i,:) = tree.subject.frames.frame(i).position(s1:s2);
            rawData.segments.(segmentNames{sn}).segmentVelocity(i,:) = tree.subject.frames.frame(i).velocity(s1:s2);
            rawData.segments.(segmentNames{sn}).segmentAcceleration(i,:) = tree.subject.frames.frame(i).acceleration(s1:s2);
            rawData.segments.(segmentNames{sn}).segmentOrientation(i,:) = tree.subject.frames.frame(i).orientation(sn*4-3:sn*4);
            rawData.segments.(segmentNames{sn}).segmentAngVelocity(i,:) = tree.subject.frames.frame(i).angularVelocity(s1:s2);
            rawData.segments.(segmentNames{sn}).segmentAngAcceleration(i,:) = tree.subject.frames.frame(i).angularAcceleration(s1:s2);
        end
    end

    % restructuring the joint data
    for i = 1:numel(tree.subject.frames.frame)
        for jn = 1:numel(jointNames)
            s2 = jn*3;
            s1 = (jn*3)-2;
            rawData.joints.(jointNames{jn}).jointAngle(i,:) = tree.subject.frames.frame(i).jointAngle(s1:s2);
            rawData.joints.(jointNames{jn}).jointAngleXZY(i,:) = tree.subject.frames.frame(i).jointAngleXZY(s1:s2);
        end
    end

    % restructuring the sensor data
    for i = 1: numel(tree.subject.frames.frame)
        for sl = 1:numel(sensorLocation)
            s2 = sl * 3;
            s1 = (sl *3) -2;
            rawData.sensors.(sensorLocation{sl}).sensorFreeAcceleration(i,:) = tree.subject.frames.frame(i).sensorFreeAcceleration(s1:s2);
            rawData.sensors.(sensorLocation{sl}).sensorOrientation(i,:) = tree.subject.frames.frame(i).sensorOrientation(sl*4-3:sl*4);
            rawData.sensors.(sensorLocation{sl}).sensorMagneticField(i,:) = tree.subject.frames.frame(i).sensorMagneticField(s1:s2);
        end
    end


    save(fullfile(path_input, [input_file(1:end-5) '.mat']), "jointNames", "rawData", "segmentNames", "sensorLocation", "tree");
    clear jointNames rawData segmentNames sensorLocation tree
    %         clear jointNames segmentNames sensorLocation tree


%% Part 2 - wrinting the files to .sto

disp("--- PART 2: WRITING STO FILES ---")

Headers = {'torso_imu', 'pelvis_imu','humerus_r_imu','radius_r_imu','humerus_l_imu','radius_l_imu',...
    'femur_r_imu','tibia_r_imu','calcn_r_imu','femur_l_imu','tibia_l_imu','calcn_l_imu','hand_l_imu','hand_r_imu'};
Headers_MatF = { 'T8', 'Pelvis', 'RightUpperArm','RightForeArm','LeftUpperArm','LeftForeArm',...
    'RightUpperLeg','RightLowerLeg','RightFoot','LeftUpperLeg','LeftLowerLeg','LeftFoot','LeftHand','RightHand'};
nbodies =  length(Headers);

    R = load(fullfile(path_input, [input_file(1:end-5) '.mat']));

    % get the file data
    dat = R.rawData;

    % pre-allocate the data matrix
    SensorsNames = fieldnames(dat.sensors);
    nfr = size(dat.sensors.(SensorsNames{1}).sensorOrientation, 1); % size of (Pelvis sensor orientation) in first dimension
    DataMatrix = zeros(nfr,nbodies*4);
    DataMatrix_acc = zeros(nfr,nbodies*3);
    % DataMatrix_ang = zeros(nfr,nbodies*3);
    DataMatrix_mag = zeros(nfr,nbodies*3);

    % fill the data matrix
    for j = 1:nbodies
        sumCor = sum(strcmp(SensorsNames, Headers_MatF{j}));
        if sumCor == 1
            ih = find(strcmp(SensorsNames, Headers_MatF{j}));
            or = dat.sensors.(SensorsNames{ih}).sensorOrientation;
            acc = dat.sensors.(SensorsNames{ih}).sensorFreeAcceleration;
            % ang = dat.sensors.(SensorsNames{ih}).sensorAngularVelocity;
            mag = dat.sensors.(SensorsNames{ih}).sensorMagneticField;
            DataMatrix(:,j*4-3:j*4) = or;
            DataMatrix_acc(:,j*3-2:j*3) = acc;
            % DataMatrix_ang(:,j*3-2:j*3) = ang;
            DataMatrix_mag(:,j*3-2:j*3) = mag;
        elseif sumCor == 0
            continue
        else
            error("There is an invalid correspondance between sensornames of mat file" + ...
                "and Headers_MatF.")
        end

    end

    [~,name, ~] = fileparts(input_file);

    % get the time vector
    fr = dat.framerate;
    time=(0:nfr-1)./fr + 0;
    save(fullfile(path_input, append(name, '_DataMatrix')), 'DataMatrix_acc', 'DataMatrix_mag', 'DataMatrix', 'time');

    % save the Storage file for OpenSim - orientation file
    Create_IMU_Storage(fullfile(path_input, [name '_orientations.sto']), nfr, nbodies, time', DataMatrix, Headers);
    disp([name ' Saved']);

end